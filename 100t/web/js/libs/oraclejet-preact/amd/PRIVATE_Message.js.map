{"version":3,"file":"PRIVATE_Message.js","sources":["../../src/PRIVATE_Message/MessageCustomStartIcon.tsx","../../src/PRIVATE_Message/MessageHeader.tsx","../../src/PRIVATE_Message/Message.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageStartIconStyles } from './themes/MessageStyles.css';\nimport { MessageRendererDataItem } from './Message.types';\n\n/**\n * Props for the StartIcon component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the start icon\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  renderer: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n};\n\n/**\n * Component for rendering custom icon/content for start icon in Message\n */\nfunction MessageCustomStartIcon<K, D>({ item, renderer }: Props<K, D>) {\n  // TODO: https://jira.oraclecorp.com/jira/browse/JET-56454 Refactor to utilize useComponentTheme and multiVariantStyles.\n  const classes = classNames([\n    messageStartIconStyles.base,\n    // for now only toast has support for custom icon\n    messageStartIconStyles.toast,\n    messageStartIconStyles.customToast\n  ]);\n  return (\n    <div class={classes} role=\"presentation\">\n      {renderer(item)}\n    </div>\n  );\n}\n\nexport { MessageCustomStartIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageHeaderStyles } from './themes/MessageStyles.css';\nimport { MessageVariant } from './Message.types';\n\n/**\n * Props for the MessageHeader component\n */\ntype MessageHeaderProps = {\n  variant?: MessageVariant;\n  children?: ComponentChildren;\n};\n/**\n * A component that styles the header for the message component\n * @param param0 Props\n * @returns MessageHeader component instance\n */\nexport function MessageHeader({ children, variant = 'banner' }: MessageHeaderProps) {\n  const rootClasses = classNames([messageHeaderStyles.base, messageHeaderStyles[variant]]);\n  return (\n    <div role=\"presentation\" class={rootClasses}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref, VNode } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { Flex } from '../UNSAFE_Flex';\nimport { MessageToastItem } from '../UNSAFE_MessageToast';\nimport { Timer } from '../utils/PRIVATE_timer';\nimport { classNames as cx } from '../utils/UNSAFE_classNames';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { messageStyles } from './themes/MessageStyles.css';\nimport { MessageRendererDataItem, MessageSeverity } from './Message.types';\nimport { MessageCloseButton } from './MessageCloseButton';\nimport { MessageCustomStartIcon } from './MessageCustomStartIcon';\nimport { MessageDetail } from './MessageDetail';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageHeader } from './MessageHeader';\nimport { MessageStartIcon } from './MessageStartIcon';\nimport { MessageSummary } from './MessageSummary';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { playSound, severityBasedStyleClass } from './MessageUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MessageBannerVariantOptions } from '../UNSAFE_MessageBanner';\nimport { MessageBannerRedwoodTheme } from '../UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme';\n\n// TODO: Refactor Message Item types\n// https://jira.oraclecorp.com/jira/browse/JET-54215\n\n/**\n * An object representing a single message in Message component.\n */\nexport type MessageItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: MessageSeverity;\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * A ref object for holding reference to this component\n   */\n  messageRef?: Ref<HTMLDivElement>;\n\n  /**\n   * The index of the current message instance\n   */\n  index?: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n\n  /**\n   * A renderer that renders the close button in the message.\n   */\n  closeButtonRenderer?: (title: string, onAction: (event?: Event) => void) => VNode;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  detailRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  iconRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The parent\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message to be removed from the DOM. If the parent\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * A message can be a Banner message or Toast message.\n   *\n   * Furthermore, a Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  variant?: 'pageBanner' | 'sectionBanner' | 'toast';\n\n  /**\n   * Translations resources\n   */\n  translations?: {\n    /**\n     * Label for the message close button\n     */\n    close?: string;\n\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * Determines the base variant of the message - banner or toast\n *\n * @param variant The message variant\n * @returns The base variant\n */\nfunction getBaseVariant(variant: 'pageBanner' | 'sectionBanner' | 'toast') {\n  if (variant === 'pageBanner' || variant === 'sectionBanner') {\n    return 'banner';\n  }\n  return 'toast';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\n/**\n * Default timeout duration for autoTimeout in milliseconds\n */\nconst MIN_SECONDS = 5;\nconst DEFAULT_TIMEOUT = MIN_SECONDS * 1000;\n\n/**\n * Component that renders an individual message\n */\nfunction Message<K extends string | number = string | number, D extends MessageItem = MessageItem>({\n  closeButtonRenderer,\n  detailRenderer,\n  iconRenderer,\n  index = -1,\n  item,\n  onClose,\n  messageRef = () => {},\n  variant = 'pageBanner',\n  translations\n}: Props<K, D>) {\n  const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;\n  const { autoTimeout = 'off' } = item.data as MessageToastItem;\n  const baseVariant = getBaseVariant(variant);\n\n  /**\n   * Handles clicking on the close icon of the message\n   */\n  const handleClose = useCallback(() => {\n    onClose?.(item);\n  }, [item, onClose]);\n\n  /**\n   * Handles closing the message on pressing Esc\n   */\n  const handleCloseOnEsc = useCallback(\n    (event: KeyboardEvent) => {\n      // Close the message only when closeAffordance is on\n      if (event.key === 'Escape' && closeAffordance === 'on') {\n        onClose?.(item);\n      }\n    },\n    [closeAffordance, item, onClose]\n  );\n\n  /**\n   * Set auto timeout for toast messages\n   */\n  const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';\n  const currentTimerRef = useRef<Timer>();\n  const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;\n  const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;\n\n  const startTimer = useCallback(() => {\n    if (currentTimerRef.current) return;\n\n    currentTimerRef.current = new Timer(handleClose, timeoutDuration);\n  }, [handleClose, timeoutDuration]);\n\n  const clearTimer = useCallback(() => {\n    if (!currentTimerRef.current) return;\n\n    currentTimerRef.current.clear();\n    currentTimerRef.current = undefined;\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    currentTimerRef.current?.pause();\n  }, []);\n\n  const resumeTimer = useCallback(() => {\n    currentTimerRef.current?.resume();\n  }, []);\n\n  useEffect(() => {\n    if (isValidValueForProp(sound)) {\n      // It is sufficient to check for the value to be a\n      // non-empty string. The playSound method takes care of the rest.\n      playSound(sound);\n    }\n\n    // on mount, start timer for toast messages if needed\n    if (shouldTimeout) {\n      startTimer();\n    }\n\n    return () => {\n      // clear out any pending timer\n      clearTimer();\n    };\n    // eslint-disable-next-line\n  }, []); // No deps to run this only on mount\n\n  const { variantClasses } = useComponentTheme<MessageBannerVariantOptions>(\n    MessageBannerRedwoodTheme,\n    {\n      severity\n    }\n  );\n\n  // TODO: https://jira.oraclecorp.com/jira/browse/JET-56454 Refactor to utilize useComponentTheme and multiVariantStyles.\n  const rootClasses = cx([\n    baseVariant === 'banner' && variantClasses,\n    messageStyles.base[baseVariant],\n    // for now, we do not have severity based styling on toast. So, we ignore this class for toasts\n    variant !== 'toast' && severityBasedStyleClass(severity, baseVariant),\n    variant === 'sectionBanner' && messageStyles.section\n  ]);\n\n  const contentClasses = cx([messageStyles.content.base, messageStyles.content[baseVariant]]);\n\n  // We will be animating the root div, so add padding to an inner wrapper div so that\n  // when animating height looks smooth. If padding were to be added to the root\n  // div, the animation will not be smooth as height will never reach 0 due to the\n  // padding.\n  return (\n    <div\n      ref={messageRef}\n      class={rootClasses}\n      role=\"alert\"\n      aria-atomic=\"true\"\n      tabIndex={0}\n      onKeyUp={handleCloseOnEsc}\n      onfocusin={pauseTimer}\n      onfocusout={resumeTimer}>\n      <div class={contentClasses}>\n        {iconRenderer ? (\n          <MessageCustomStartIcon item={{ ...item, index }} renderer={iconRenderer} />\n        ) : isSeverityIconNeeded(severity) ? (\n          <MessageStartIcon severity={severity} variant={baseVariant} translations={translations} />\n        ) : null}\n        <Flex direction=\"column\" flex=\"1\" gap=\"--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x\">\n          <MessageHeader variant={baseVariant}>\n            <MessageSummary variant={baseVariant} text={summary} />\n            {isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && (\n              <MessageTimestamp variant={baseVariant} value={timestamp!} />\n            )}\n          </MessageHeader>\n          <MessageDetail\n            variant={baseVariant}\n            item={{ ...item, index }}\n            renderer={detailRenderer}\n          />\n        </Flex>\n        {closeAffordance === 'on' && (\n          <MessageCloseButton\n            buttonRenderer={closeButtonRenderer}\n            title={translations?.close}\n            variant={baseVariant}\n            onAction={handleClose}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n"],"names":["MessageCustomStartIcon","item","renderer","classes","classNames","messageStartIconStyles","base","toast","customToast","_jsx","class","role","children","MessageHeader","variant","rootClasses","messageHeaderStyles","jsx","isSeverityIconNeeded","severity","isValidValueForProp","DEFAULT_TIMEOUT","MIN_SECONDS","closeButtonRenderer","detailRenderer","iconRenderer","index","onClose","messageRef","translations","closeAffordance","sound","summary","timestamp","data","autoTimeout","baseVariant","getBaseVariant","handleClose","useCallback","handleCloseOnEsc","event","key","shouldTimeout","currentTimerRef","useRef","timeoutDuration","startTimer","current","Timer","clearTimer","clear","undefined","pauseTimer","pause","resumeTimer","resume","useEffect","playSound","variantClasses","useComponentTheme","MessageBannerRedwoodTheme","cx","messageStyles","severityBasedStyleClass","section","contentClasses","content","ref","tabIndex","onKeyUp","onfocusin","onfocusout","_jsxs","MessageStartIcon","Flex","direction","flex","gap","jsxs","MessageSummary","text","MessageTimestamp","value","MessageDetail","MessageCloseButton","buttonRenderer","title","close","onAction"],"mappings":"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"}