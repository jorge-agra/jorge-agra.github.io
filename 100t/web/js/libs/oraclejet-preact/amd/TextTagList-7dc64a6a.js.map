{"version":3,"file":"TextTagList-7dc64a6a.js","sources":["../../src/UNSAFE_SelectMultiple/TextTagList.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = stringLiteralArray(['maxWidth']);\ntype SupportedDimensions = typeof supportedDimensions[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // https://jira.oraclecorp.com/jira/browse/JET-57596\n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n"],"names":["supportedDimensions","stringLiteralArray","supportedInterpolations","Array","from","x","dimensionInterpolations","styleInterpolations","mergeInterpolations","TextTagList","forwardRef","props","ref","ariaLabel","data","hasInsideLabel","removeIcon","onExitNavigation","onRemove","divRef","useRef","selectedTags","setSelectedTags","useState","direction","useUser","currentSelectedTagIndex","lastTag","at","value","lastTagMeta","index","length","current","selectTagAtIndex","useCallback","key","clearSelection","previousSelectedTags","onTagRemoveIconClick","onTagRemoveAction","valuesToRemove","includes","push","onTagSelect","findIndex","tag","onTagKeyDown","event","code","isSelectAll","map","preventDefault","handleOnFocus","undefined","handleOnBlur","focusProps","useFocusWithin","onBlurWithin","useImperativeHandle","blur","focus","useEffect","scrollTo","left","scrollWidth","styles","rootClasses","classNames","textTagListStyles","textTagListBase","textTagListInsideLabel","_jsx","class","tabIndex","onKeyDown","role","style","children","jsx","TextTag","isFocused","isSelected","onRemoveAction","onSelect","onRemoveIconClick","label"],"mappings":"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"}