{"version":3,"file":"Collapsible-74774d95.js","sources":["../../src/UNSAFE_Collapsible/CollapsibleHeaderIcon.tsx","../../src/UNSAFE_Collapsible/CollapsibleHeader.tsx","../../src/UNSAFE_Collapsible/CollapsibleContent.tsx","../../src/UNSAFE_Collapsible/Collapsible.tsx"],"sourcesContent":["import { ExpandIcon } from '../PRIVATE_ThemedIcons/ExpandIcon';\nimport { CollapseIcon } from '../PRIVATE_ThemedIcons/CollapseIcon';\nimport { CollapseUpIcon } from '../PRIVATE_ThemedIcons/CollapseUpIcon';\n\ntype IconProps = {\n  isExpanded: boolean;\n  isDisabled?: boolean;\n  iconPosition?: 'start' | 'end';\n};\n\n/**\n * Header icon subcomponent\n */\nexport const CollapsibleHeaderIcon = ({ isExpanded, isDisabled, iconPosition }: IconProps) => {\n  const color = isDisabled ? 'disabled' : 'primary';\n  const startIcon = iconPosition === 'start' && isExpanded ? ExpandIcon : CollapseIcon;\n  const endIcon = iconPosition === 'end' && isExpanded ? CollapseUpIcon : ExpandIcon;\n  const Icon = iconPosition === 'start' ? startIcon : endIcon;\n\n  return <Icon size=\"6x\" color={color} />;\n};\n","import { Fragment } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { CollapsibleVariantOptions, CollapsibleStyles } from './themes/CollapsibleStyles.css';\n\nimport { Flex } from '../UNSAFE_Flex';\nimport { Divider } from '../UNSAFE_Divider';\nimport { CollapsibleHeaderIcon } from './CollapsibleHeaderIcon';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { CollapsibleRedwoodTheme } from './themes/redwood/CollapsibleTheme';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'id' | 'children'>;\n\ntype HeaderProps = IntrinsicProps & {\n  id: string;\n  contentId: string;\n  isDisabled: boolean;\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n  variant?: 'basic' | 'horizontal-rule';\n  toggleHandler: (target: EventTarget | null) => void;\n  accessibleLabel?: string;\n  accessibleLabelId?: string;\n};\n\n/**\n * Header subcomponent\n */\n\nexport const CollapsibleHeader = ({\n  children,\n  id,\n  contentId,\n  isDisabled,\n  isExpanded,\n  iconPosition,\n  variant = 'basic',\n  toggleHandler,\n  accessibleLabel,\n  accessibleLabelId\n}: HeaderProps) => {\n  const [hasFocus, setFocus] = useState<boolean>(false);\n\n  const { classes, styles } = useComponentTheme<CollapsibleVariantOptions, CollapsibleStyles>(\n    CollapsibleRedwoodTheme,\n    {\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      divider: variant === 'horizontal-rule' ? 'hasDivider' : 'noDivider',\n      focused: hasFocus ? 'isFocused' : 'notFocused'\n    }\n  );\n\n  const childrenClasses = classNames([\n    styles.headerChildrenStyle,\n    iconPosition === 'end' && styles.iconEndStyle,\n    iconPosition === 'start' && styles.iconStartStyle\n  ]);\n\n  const pressHandler = useCallback(\n    (event: Event) => {\n      toggleHandler(event.target);\n      // if the toggle was caused by a pointer action, remove focus highlight from the header div\n      // the test environment may not support PointerEvent, make sure it is supported\n      const hasPointerEvent = window && 'PointerEvent' in window;\n      if ((hasPointerEvent && event instanceof PointerEvent) || event instanceof MouseEvent) {\n        setFocus(false);\n      }\n    },\n    [toggleHandler]\n  );\n\n  const { pressProps } = usePress(pressHandler, {\n    isDisabled,\n    isRepeat: false\n  });\n\n  // if focused, we want to render the focus highlight on the collapsible header div\n  const onFocus = useCallback((event: Event) => {\n    if (event.type === 'focusin') {\n      setFocus(true);\n    } else {\n      setFocus(false);\n    }\n  }, []);\n\n  // Resolve accessible label. By default, the expand button is labelled by the header content.\n  // If accessibleLabel or accessibleLabeleId is specified, they get used instead.\n  const ariaLabelProp = accessibleLabel\n    ? { 'aria-label': accessibleLabel }\n    : accessibleLabelId\n    ? { 'aria-labelledby': accessibleLabelId }\n    : { 'aria-labelledby': id };\n\n  const getHeader = () => (\n    <Fragment>\n      {iconPosition === 'end' && <div className={childrenClasses}>{children}</div>}\n      <div\n        tabIndex={0}\n        role={'button'}\n        aria-controls={contentId}\n        aria-expanded={isExpanded}\n        onFocus={onFocus}\n        onBlur={onFocus}\n        className={styles.chevronStyle}\n        {...ariaLabelProp}>\n        <CollapsibleHeaderIcon\n          iconPosition={iconPosition}\n          isExpanded={isExpanded}\n          isDisabled={isDisabled}\n        />\n      </div>\n      {iconPosition === 'start' && <div className={childrenClasses}>{children}</div>}\n    </Fragment>\n  );\n\n  return (\n    <>\n      <div id={id} className={classes} {...pressProps}>\n        <Flex align=\"center\" justify={iconPosition === 'start' ? 'start' : 'between'}>\n          {getHeader()}\n        </Flex>\n      </div>\n      {variant === 'horizontal-rule' && <Divider />}\n    </>\n  );\n};\n","import { JSX } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { CollapsibleStyles } from './themes/CollapsibleStyles.css';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { CollapsibleRedwoodTheme } from './themes/redwood/CollapsibleTheme';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isExpanded: boolean;\n  onTransitionEnd: () => void;\n};\n\n/**\n * The 'collapsing' and 'expanding' states are related to the animation. The 'unmounted' state\n * is used for conditional rendering. In this state, the Collapsible content is completely removed\n * from the DOM. The 'unmounted' state is set either as an initial state or when collapsing\n * animation ends.\n */\ntype Status = 'collapsing' | 'expanding' | 'unmounted';\n\nexport const CollapsibleContent = ({ children, id, isExpanded, onTransitionEnd }: ContentProps) => {\n  const [state, setState] = useState<Status>(isExpanded ? 'expanding' : 'unmounted');\n\n  const { styles } = useComponentTheme<never, CollapsibleStyles>(CollapsibleRedwoodTheme);\n\n  /**\n   * 1. On initial render, Preact sets style.maxHeight field to 0 or 'none'.\n   * 2. During expanding animation, useAnimation hook uses WAAPI to animate the maxHeight out\n   *    to the expanded value.\n   * 3. On subsequent re-renders, Preact does never updates the style.maxHeight value\n   *    because even though we are telling Preact that maxHeight should be 0 or 'none', Preact\n   *    considers the maxHeight value is 0 or 'none' as it is not aware that we changed this value\n   *    in step 2. So from Preact's perspective there is no difference.\n   */\n  const contentInitialStyle = useRef<JSX.CSSProperties>({\n    overflowY: 'hidden',\n    maxHeight: isExpanded ? 'none' : '0'\n  });\n\n  useEffect(() => {\n    // Ignore state update on initial render\n    if (state === 'unmounted' && !isExpanded) {\n      return;\n    }\n    setState(isExpanded ? 'expanding' : 'collapsing');\n  }, [isExpanded, state]);\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(state, {\n    animationStates,\n    onAnimationEnd: ({ animationState }) => {\n      if (animationState === 'collapsing') {\n        setState('unmounted');\n      }\n      onTransitionEnd?.();\n    }\n  });\n\n  return (\n    <div\n      className={styles.contentChildrenStyle}\n      ref={nodeRef}\n      id={id}\n      tabIndex={-1}\n      style={contentInitialStyle.current}\n      aria-hidden={!isExpanded || undefined}>\n      {state !== 'unmounted' && children}\n    </div>\n  );\n};\n\n/**\n * The transition from collapsed to expanded works as follows:\n * 1. When the component is initially rendered in the collapsed state, we\n *    explicitly set maxHeight and overflowY from \"to\" configuration.\n * 2. When the expanded prop changes from false to true, we first mount the content children.\n * 3. Once this is mounted we trigger an animation updating animationState value of useAnimationHook.\n * 4. Configuration is represented inside hook. Passed config depends if previous animation was completed or not.\n *    We could check that based on node.style.maxHeight.\n *\n * The transition from expanded to collapsed is similar:\n * 1. We trigger an animation updating animationState value of useAnimationHook.\n * 2. Once animation is completed, with the help of end config,we set max-Height as 'none'.\n *    This will allow us to keep adding content.\n * 3. Once this is done, onAnimationEnd is called(as 'from collapsed to expanded\"). Here, content children are unmouunted.\n */\nconst animationStates: UseAnimationConfig<Status, HTMLDivElement>['animationStates'] = {\n  expanding: (node) => ({\n    to: {\n      maxHeight: `${node.scrollHeight}px`\n    },\n    options: {\n      duration: 400\n    },\n    end: {\n      maxHeight: 'none'\n    }\n  }),\n  collapsing: (node) => ({\n    ...(node.style.maxHeight === 'none' && {\n      from: {\n        maxHeight: `${node.scrollHeight}px`\n      }\n    }),\n    to: {\n      maxHeight: '0'\n    },\n    options: {\n      duration: 400\n    }\n  })\n};\n","import { ComponentChildren } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { CollapsibleHeader } from './CollapsibleHeader';\nimport { CollapsibleContent } from './CollapsibleContent';\n\ntype Props = {\n  /**\n   * Collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.\n   */\n  header?: ComponentChildren;\n\n  /**\n   * The content node to be collapsed\n   */\n  children?: ComponentChildren;\n\n  /**\n   * Disables the collapsible if set to true\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if the content is expanded\n   */\n  isExpanded?: boolean;\n\n  /**\n   * Changes chevron icon placement at the end of the collapsible header\n   */\n  iconPosition?: 'start' | 'end';\n\n  /**\n   * Controls the header display which con include a divider below the collapsible header\n   */\n  variant?: 'basic' | 'horizontal-rule';\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggle?: (details: ToggleDetail) => void;\n\n  /**\n   * Property that triggers a callback after toggle animation is done\n   */\n  onTransitionEnd?: (details: TransitionEnd) => void;\n\n  /**\n   * An alternative accessible label. By default, the header content is used as Collapsible's accessible label.\n   * If required, the user can set a custom 'accessibleLabel' value.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An alternative accessible label id. By default, the header content is used as Collapsible's accessible label.\n   * If required, the user can specify an element id within the header to be used as the accessible label.\n   * If both 'accessibleLabel' and 'accessibilityId' are specified, the 'accessibleLabelId' is ignored.\n   */\n  'aria-labelledby'?: string;\n};\n\ntype ToggleDetail = TransitionEnd & {\n  target: EventTarget | null;\n};\n\ntype TransitionEnd = {\n  value: boolean;\n};\n\n/**\n * A collapsible displays a header that can be expanded to show its content.\n */\n\nexport const Collapsible = ({\n  header,\n  children,\n  isDisabled = false,\n  isExpanded = false,\n  iconPosition = 'start',\n  variant = 'basic',\n  onToggle,\n  onTransitionEnd,\n  'aria-label': accessibleLabel,\n  'aria-labelledby': accessibleLabelId\n}: Props) => {\n  const uniqueID = useId();\n  const headerId = `oj-collapsible-header-${uniqueID}`;\n  const contentId = `oj-collapsible-content-${uniqueID}`;\n\n  /**\n   * Function handling toggle and invoking callback for collapsing/expanding\n   */\n  const toggleHandler = useCallback(\n    (target: EventTarget | null) => {\n      if (isDisabled) {\n        return;\n      }\n      onToggle?.({\n        value: !isExpanded,\n        target\n      });\n    },\n    [isDisabled, onToggle, isExpanded]\n  );\n\n  /**\n   * Function that is triggerd when animation ends\n   */\n  const transitionEndHandler = useCallback(() => {\n    onTransitionEnd?.({\n      value: isExpanded\n    });\n  }, [onTransitionEnd, isExpanded]);\n\n  return (\n    <>\n      <CollapsibleHeader\n        id={headerId}\n        contentId={contentId}\n        toggleHandler={toggleHandler}\n        isDisabled={isDisabled}\n        isExpanded={isExpanded}\n        iconPosition={iconPosition}\n        variant={variant}\n        accessibleLabel={accessibleLabel}\n        accessibleLabelId={accessibleLabelId}>\n        {header}\n      </CollapsibleHeader>\n      <CollapsibleContent\n        id={contentId}\n        isExpanded={isExpanded}\n        onTransitionEnd={transitionEndHandler}>\n        {children}\n      </CollapsibleContent>\n    </>\n  );\n};\n"],"names":["CollapsibleHeaderIcon","isExpanded","isDisabled","iconPosition","color","startIcon","ExpandIcon","CollapseIcon","endIcon","CollapseUpIcon","Icon","_jsx","size","CollapsibleHeader","children","id","contentId","variant","toggleHandler","accessibleLabel","accessibleLabelId","hasFocus","setFocus","useState","classes","styles","useComponentTheme","CollapsibleRedwoodTheme","disabled","divider","focused","childrenClasses","classNames","headerChildrenStyle","iconEndStyle","iconStartStyle","pressHandler","useCallback","event","target","window","PointerEvent","MouseEvent","pressProps","usePress","isRepeat","onFocus","type","ariaLabelProp","_jsxs","jsx","className","Flex","align","justify","Fragment","tabIndex","role","onBlur","chevronStyle","Divider","CollapsibleContent","onTransitionEnd","state","setState","contentInitialStyle","useRef","overflowY","maxHeight","useEffect","nodeRef","useAnimation","animationStates","onAnimationEnd","animationState","contentChildrenStyle","ref","style","current","undefined","expanding","node","to","scrollHeight","options","duration","end","collapsing","from","header","onToggle","uniqueID","useId","headerId","value","transitionEndHandler","jsxs","_Fragment"],"mappings":"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"}