{"version":3,"file":"listViewTabbableModeTests-9e8a06f4.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTabbableModeTests.tsx"],"sourcesContent":["import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata } from '../../../UNSAFE_Collection';\nimport userEvent from '@testing-library/user-event';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getRoot } from './testHelpers';\n\nexport type Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testTabbableMode = (TestComponent: TestComponentProps<any>) => {\n  it('acts as single tab stop in composition', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByText('Preceding Button'));\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByText('Following Button'));\n    userEvent.tab({ shift: true });\n    expect(document.activeElement).equals(grid);\n    userEvent.tab({ shift: true });\n    expect(document.activeElement).equals(list.getByText('Preceding Button'));\n  });\n\n  it('enters interactive mode with keyboard via F2', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    // Tab past first button into ListView\n    userEvent.tab();\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyDown(grid, { key: 'F2' });\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n  });\n\n  it('enters and leaves interactive mode with keyboard via F2, ESC and arrow keys', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    // Tab past first button into ListView\n    userEvent.tab();\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyDown(grid, { key: 'F2' });\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    fireEvent.keyDown(grid, { key: 'Esc' });\n    await waitFor(() => {\n      expect(document.activeElement).equals(grid);\n    });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    const secondRowInput = list.getByTestId('input-1');\n    expect(secondRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyDown(grid, { key: 'F2' });\n    expect(secondRowInput.getAttribute('tabindex')).equals('0');\n  }, 3000);\n\n  it('enters interactive mode with click on input', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(document.activeElement).equals(firstRowInput);\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByTestId('button-0'));\n  });\n\n  // FIXME: reenable this test once https://jira.oraclecorp.com/jira/browse/JET-54037 is fixed\n  xit('leaves interactive mode with click outside', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    list.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(document.activeElement).equals(firstRowInput);\n    const outsideElement = list.getByText('Preceding Button');\n    userEvent.click(outsideElement);\n    expect(document.activeElement).equals(outsideElement);\n    list.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","list","render","_jsx","grid","getRoot","userEvent","tab","expect","document","activeElement","equals","getByText","shift","rerender","firstRowInput","getByTestId","getAttribute","fireEvent","keyDown","waitFor","secondRowInput","click","xit","outsideElement"],"mappings":"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"}