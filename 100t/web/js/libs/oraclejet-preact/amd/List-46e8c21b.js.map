{"version":3,"file":"List-46e8c21b.js","sources":["../../src/PRIVATE_List/ListRoles.ts","../../src/PRIVATE_List/ListItem.tsx","../../src/PRIVATE_List/Sparkle.tsx","../../src/PRIVATE_List/List.tsx","../../src/PRIVATE_List/useHandleRemoveCurrentKey.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Roles } from '../UNSAFE_ListView';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\n/**\n * List Roles need to be kept in matching sets, this module encapsulates the sets\n *\n * @param ariaRole\n * @returns matching, valid set of roles\n */\n\nconst getListViewRoles = (\n  ariaRole: Roles\n): {\n  list: HTMLAttributesSignalExcluded['role'];\n  item: HTMLAttributesSignalExcluded['role'];\n  cell: HTMLAttributesSignalExcluded['role'];\n} => {\n  switch (ariaRole) {\n    case 'listbox':\n      return { list: 'listbox', item: 'presentation', cell: 'option' };\n    case 'treegrid':\n      return { list: 'treegrid', item: 'row', cell: 'gridcell' };\n    default:\n      return { list: 'grid', item: 'row', cell: 'gridcell' };\n  }\n};\n\nexport { getListViewRoles };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useRef, useMemo } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { SelectionMode, CurrentItemVariant } from '../UNSAFE_Collection';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { Roles } from '../UNSAFE_ListView';\nimport { getListViewRoles } from './ListRoles';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { listItemStyles, listItemMultiVariantStyles } from './themes/ListStyles.css';\n\n// default style class for items in ListView\nexport const ITEM_STYLE_CLASS = 'oj-c-listview-item';\nexport const ITEM_SELECTOR = '.' + ITEM_STYLE_CLASS;\n\n/**\n * Props for the ListViewItem Component\n */\nexport type Props<K, D> = {\n  children: ComponentChildren;\n  itemKey: K;\n  itemData: D;\n  itemIndex: number;\n  itemDepth?: number;\n  isFocused: boolean;\n  isFocusRingVisible: boolean;\n  isActive: boolean;\n  isGridlineVisible: boolean;\n  isSelected: boolean;\n  isTopGridlineVisible?: boolean;\n  isTabbable?: boolean;\n  role: Roles;\n  selectionMode: SelectionMode;\n  suggestion?: 'end' | true;\n  currentItemVariant?: CurrentItemVariant;\n};\n\n/**\n * The internal component used to render a single item in ListView.\n */\nexport function ListViewItem<K extends string | number, D>({\n  children,\n  itemKey,\n  itemIndex,\n  itemDepth,\n  isFocused,\n  isFocusRingVisible,\n  isActive,\n  isGridlineVisible,\n  isSelected,\n  isTopGridlineVisible = false,\n  isTabbable = false,\n  role,\n  selectionMode,\n  suggestion,\n  currentItemVariant\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const roles = useMemo(() => getListViewRoles(role), [role]);\n\n  // some roles come with related aria attributes which need to be set\n  const cellRoleAttributes =\n    roles.cell === 'option'\n      ? {\n          role: roles.cell,\n          'aria-posinset': itemIndex + 1,\n          'aria-setsize': -1\n        }\n      : {\n          role: roles.cell\n        };\n\n  // don't bubble Arrow Up and Down events to parent when in isTabbable mode\n  // this bubbling causes the outer CollectionFocus ring to change index while in the isTabbable mode.\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (isTabbable && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n      event.stopPropagation();\n    }\n  };\n\n  const { interactionProps, applyActiveStyle, applyHoverStyle, applyPseudoHoverStyle } =\n    useInteractionStyle();\n\n  const variantClasses = listItemMultiVariantStyles({\n    selectable: isSelectable(selectionMode, isSelected) ? 'isSelectable' : 'notSelectable',\n    selected: isSelected ? 'isSelected' : 'notSelected',\n    selectedSingle:\n      isSelected && selectionMode === 'single' ? 'isSelectedSingle' : 'notSelectedSingle',\n    needsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',\n    pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n    active: applyActiveStyle || isActive ? 'isActive' : 'notActive',\n    focusHighlight:\n      currentItemVariant === 'highlight' && isFocused ? 'isFocusHighlight' : 'notFocusHighlight',\n    focusRingVisible:\n      isFocusRingVisible && isFocused ? 'isFocusRingVisible' : 'notFocusRingVisible',\n    gridlineTop: isTopGridlineVisible ? 'visible' : 'hidden',\n    gridlineBottom:\n      isGridlineVisible ||\n      (suggestion === 'end' && !isGridlineVisible && (!isSelected || selectionMode !== 'single'))\n        ? 'visible'\n        : 'hidden'\n  });\n  const classes = classNames([ITEM_STYLE_CLASS, variantClasses]);\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const { class: cls, ...cellStyles } = styleInterpolations({\n    flex: '1 1 auto',\n    alignSelf: 'center'\n  });\n  const cellClasses = classNames([\n    cls,\n    selectionMode === 'multiple' && listItemStyles.checkboxContainer\n  ]);\n\n  // todo: use translated text for selector\n  // note cannot put focus on gridcell div since JAWS will not read the aria-rowindex\n  // correctly, so unfortunately needed another div\n  return (\n    <div\n      aria-rowindex={itemIndex + 1}\n      aria-level={itemDepth}\n      data-oj-key={itemKey}\n      class={classes}\n      ref={rootRef}\n      role={roles.item}\n      {...(suggestion && { 'data-oj-suggestion': true })}\n      {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}\n      {...interactionProps}>\n      <div\n        id={useId()}\n        style={cellStyles}\n        class={cellClasses}\n        aria-posinset={itemIndex + 1}\n        aria-setsize={-1}\n        onKeyDown={handleKeyDown}\n        aria-colindex={1}\n        aria-selected={selectionMode !== 'none' ? isSelected : undefined}\n        {...cellRoleAttributes}>\n        <TabbableModeContext.Provider value={{ isTabbable }}>\n          <FocusTrap isDisabled={!isTabbable} restoreFocusRef={false}>\n            {children}\n          </FocusTrap>\n        </TabbableModeContext.Provider>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Helper method to determine whether item is selectable\n * @returns true if item is selectable (show hover effect), false otherwise\n */\nconst isSelectable = (selectionMode: SelectionMode, isItemSelected: boolean) => {\n  return selectionMode !== 'none' && (selectionMode === 'multiple' || !isItemSelected);\n};\n\nexport const MemoizeListViewItem = memo(ListViewItem, (prev: any, next: any) => {\n  if (prev && next) {\n    return (\n      prev.itemKey === next.itemKey &&\n      prev.itemIndex === next.itemIndex &&\n      prev.itemData === next.itemData &&\n      prev.isFocused === next.isFocused &&\n      prev.isFocusRingVisible === next.isFocusRingVisible &&\n      prev.isSelected === next.isSelected &&\n      prev.isTabbable === next.isTabbable &&\n      prev.isActive === next.isActive &&\n      prev.suggestion === next.suggestion\n    );\n  }\n  return false;\n});\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Metadata } from '../UNSAFE_Collection';\n\nconst SPARKLE_STYLE_CLASS = 'oj-collection-sparkle';\n\nimport { sparkleStyles } from './themes/ListStyles.css';\n\n/**\n * A sparkle component for smart suggestion indicator in ListView\n * @param sparkleHeight the height of sparkle\n */\nexport function Sparkle({ sparkleHeight }: { sparkleHeight: number }) {\n  if (sparkleHeight <= 0) {\n    return null;\n  }\n\n  const height = sparkleHeight + 'px';\n  const sparkleClasses = classNames([sparkleStyles.base]);\n  const containerClasses = classNames([sparkleStyles.container, SPARKLE_STYLE_CLASS]);\n\n  return (\n    <div key=\"sparkle\" class={containerClasses}>\n      <div class={sparkleClasses} style={{ height }}></div>\n    </div>\n  );\n}\n\n/**\n * A helper function that finds the data with suggestions, and\n * returns the corresponding keys\n * @param dataState\n */\nexport const findSuggestions = <K, D>(\n  data: { data: D; metadata: Metadata<K> }[],\n  count: number\n) => {\n  if (count === 0) {\n    return null;\n  }\n\n  const suggestionsData = data.slice(0, count);\n  return suggestionsData.reduce((suggestions, value, index) => {\n    const key = value.metadata.key;\n\n    if (index === count - 1) {\n      suggestions.set(key, 'end');\n    } else {\n      suggestions.set(key, true);\n    }\n\n    return suggestions;\n  }, new Map<K, 'end' | true>());\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject } from 'preact';\nimport { useRef, useCallback, useEffect, useState, useMemo } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { containsKey, Keys, isKeyDefined } from '../utils/UNSAFE_keys';\nimport {\n  DataState,\n  ItemContext,\n  ListItemContext,\n  Metadata,\n  Range,\n  SelectionDetail\n} from '../UNSAFE_Collection';\nimport { LoadMoreCollection, LOADMORE_STYLE_CLASS } from '../PRIVATE_LoadMoreCollection';\nimport { VirtualizedCollection, PLACEHOLDER_STYLE_CLASS } from '../PRIVATE_VirtualizedCollection';\nimport { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\nimport { ListViewItem, ITEM_SELECTOR, MemoizeListViewItem } from './ListItem';\nimport { SelectionRangeDetail, useSelection } from '../hooks/PRIVATE_useSelection';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useTabbableModeSet } from '../hooks/PRIVATE_useTabbableModeSet';\nimport { useItemAction } from '../hooks/PRIVATE_useItemAction';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Flex } from '../UNSAFE_Flex';\nimport {\n  getFirstVisibleKey,\n  getPrevNextKey,\n  findElementByKey,\n  keyExtractor\n} from '../utils/PRIVATE_collectionUtils';\nimport { Selector } from '../UNSAFE_Selector';\nimport { Props } from '../UNSAFE_ListView';\nimport { getListViewRoles } from './ListRoles';\nimport { useHandleRemoveCurrentKey } from './useHandleRemoveCurrentKey';\nimport { findSuggestions, Sparkle } from './Sparkle';\nimport { useCollectionGestureContext } from '../hooks/PRIVATE_useCollectionGestureContext';\nimport { listStyles } from './themes/ListStyles.css';\n\n/**\n * Component that renders items as a flat list.\n * In order to maximize performance, only items that are visible in the viewport are rendered.\n */\nexport function List<K extends string | number, D>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  allowTabbableMode = true,\n  children,\n  currentKey,\n  data,\n  gridlines,\n  loadingIndicator = defaultLoadingIndicator,\n  onCurrentKeyChange,\n  onLoadRange,\n  onSelectionChange,\n  onItemAction,\n  rangeExtractor,\n  role = 'grid',\n  selectedKeys = emptyKeys as Keys<K>,\n  selectionMode = 'none',\n  viewportConfig,\n  currentItemVariant = 'none',\n  promotedSection,\n  isVirtualized = true,\n  customItemRenderer,\n  eventHandlers,\n  scrollToVisibleOffset\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const listRoles = useMemo(() => getListViewRoles(role), [role]);\n\n  // tracking the anchor key which is used for shift+click selection\n  const anchorKey = useRef<K | undefined>();\n\n  // tracking pending selection/current key that is not in current data\n  const pendingSelection = useRef<{ detail: SelectionRangeDetail<K>; range: Range }>();\n  const pendingCurrentKey = useRef<K>();\n\n  const [active, setActive] = useState<boolean>(false);\n\n  // tracking sparkle height\n  const [sparkleHeight, setSparkleHeight] = useState<number>(0);\n\n  const showGridline = (index: number) => {\n    // show bottom gridlines for each item, and for the last item if specified\n    return (\n      gridlines?.item === 'visible' &&\n      (index + 1 !== data?.totalSize || gridlines?.bottom === 'visible')\n    );\n  };\n\n  const showGridlineTop = () => {\n    // show the top gridline for the first item\n    return gridlines?.item === 'visible' && gridlines?.top === 'visible';\n  };\n\n  const ariaMultiSelectable = selectionMode === 'none' ? undefined : selectionMode === 'multiple';\n  const ariaRowCount =\n    data === null ? undefined : data.sizePrecision === 'exact' ? data.totalSize : -1;\n\n  const classes = classNames([listStyles.base]);\n\n  // find out whether the current key was there before in prev render\n  // and adjust current key as needed.  This should be run before other\n  // useEffect(s) that could also alter current key.\n  useHandleRemoveCurrentKey(data, currentKey, onCurrentKeyChange);\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    selectionMode !== 'multiple',\n    getPrevNextKey(rootRef.current, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKey(rootRef.current, currentKey, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const listViewContains = (elem: Element | null) => {\n    return !!rootRef.current?.contains(elem);\n  };\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(listViewContains, [\n    'ArrowUp',\n    'ArrowDown'\n  ]);\n\n  let pendingFocusRingChange = false;\n  const [isCurrentTabbableKey, tabbableModeProps] = useTabbableModeSet(\n    listViewContains,\n    (element) => {\n      // we don't want List to go into Tabbable mode when user clicks on expander\n      return isExpander(element) ? null : (keyExtractor(element, ITEM_SELECTOR) as K);\n    },\n    currentKey,\n    // handle clean-up on disabling of the mode\n    (target: EventTarget | null, isKeyboardEvent) => {\n      if (listViewContains(target as Element)) {\n        // delay focus reset for keyboard disable so focus is reset to ListView after the FocusTrap blur lifecycle completes.\n        // pointer initiated changes will fire the onBlur organically and delaying the focus, just generates an unwanted second blur\n        if (isKeyboardEvent) {\n          // do not show a focus ring during this timeOut\n          pendingFocusRingChange = true;\n          setTimeout(() => {\n            rootRef.current?.focus();\n          }, 0);\n        } else {\n          rootRef.current?.focus();\n        }\n      }\n      // otherwise target is not in list (including body, which target should be null in that case)\n    },\n    // set currentKey when mode is enabled\n    (key: K) => {\n      onCurrentKeyChange && onCurrentKeyChange({ value: key });\n    }\n  );\n\n  useEffect(() => {\n    if (currentKey != null && rootRef.current) {\n      const elem = findElementByKey(rootRef.current, currentKey, ITEM_SELECTOR);\n      if (elem) {\n        const activeDescendant = rootRef.current.getAttribute('aria-activedescendant');\n        const cell = elem.querySelector(`[role=${listRoles.cell}]`);\n        if (cell && activeDescendant !== cell.id) {\n          // update aria-activedescendant for screenreader\n          rootRef.current.setAttribute('aria-activedescendant', cell.id);\n\n          const scroller = viewportConfig?.scroller();\n          const offset = scrollToVisibleOffset ? scrollToVisibleOffset(rootRef.current) : 0;\n          // make sure item is visible\n          scrollToVisible(elem, scroller != null ? scroller : rootRef.current, offset);\n        }\n      }\n    }\n    // listen to data because the current item would re-render when the virtualizer\n    // is fetching data or updating the data, i.e. the id of current item would be updated,\n    // so the currentKey itself couldn't guarantee the root has latest aria-activedescendant\n  }, [currentKey, data, listRoles.cell, viewportConfig]);\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange) {\n        if (detail.value.all === false && detail.value.keys.size > 0) {\n          // the last key selected by a user gesture is the anchor key\n          anchorKey.current = Array.from(detail.value.keys.values()).pop();\n        }\n        onSelectionChange(detail);\n      }\n    },\n    [anchorKey, onSelectionChange]\n  );\n\n  const handleSelectionRangeChange = useCallback(\n    (detail: SelectionRangeDetail<K>) => {\n      if (data && onSelectionChange) {\n        const value = handleSelectionRange(detail, data);\n        if (Array.isArray(value)) {\n          onSelectionChange({ value: { all: false, keys: new Set(value) }, target: null });\n        } else {\n          pendingSelection.current = {\n            detail: detail,\n            range: { offset: data.offset, count: data.data.length }\n          };\n          onLoadRange(value);\n        }\n      }\n    },\n    [data, onSelectionChange, onLoadRange]\n  );\n\n  const handleInitialFocus = useCallback(() => {\n    if (\n      rootRef.current &&\n      onCurrentKeyChange &&\n      (!allowTabbableMode || isCurrentTabbableKey(undefined))\n    ) {\n      const firstKey =\n        pendingCurrentKey.current || (getFirstVisibleKey(rootRef.current, ITEM_SELECTOR) as K);\n      if (isKeyDefined(firstKey)) {\n        onCurrentKeyChange({ value: firstKey });\n      }\n    }\n  }, [allowTabbableMode, onCurrentKeyChange, isCurrentTabbableKey]);\n\n  /**\n   * Used by allowTabbableMode = false, to prevent focus from getting onto checkboxes on click\n   * @param event\n   */\n  const handleSelectorFocusCapture = useCallback(\n    (event: FocusEvent) => {\n      const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n      if (key && (event.relatedTarget as HTMLElement)?.getAttribute('type') === 'checkbox') {\n        rootRef.current?.focus();\n        if (onCurrentKeyChange && key) {\n          onCurrentKeyChange({ value: key as K });\n        }\n      }\n    },\n    [onCurrentKeyChange]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent) => {\n      if (isExpander(event.target as HTMLElement)) {\n        rootRef.current?.focus();\n        const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n        if (onCurrentKeyChange && key) {\n          onCurrentKeyChange({ value: key as K });\n        }\n        return;\n      }\n      !isKeyDefined(currentKey) && onCurrentKeyChange && handleInitialFocus();\n      !allowTabbableMode && handleSelectorFocusCapture(event);\n    },\n    [\n      allowTabbableMode,\n      currentKey,\n      handleInitialFocus,\n      handleSelectorFocusCapture,\n      onCurrentKeyChange\n    ]\n  );\n\n  const value = useCollectionGestureContext();\n\n  const { selectionProps } = useSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    selectionMode,\n    false,\n    'replace',\n    value === 'embedded',\n    handleSelectionChange,\n    anchorKey.current,\n    currentKey,\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    undefined,\n    (key: K) => {\n      if (rootRef.current) {\n        const elem = findElementByKey(rootRef.current, key, ITEM_SELECTOR);\n        if (elem) {\n          const scroller = viewportConfig?.scroller();\n          const offset = scrollToVisibleOffset ? scrollToVisibleOffset(rootRef.current) : 0;\n          scrollToVisible(elem, scroller != null ? scroller : rootRef.current, offset);\n        }\n      }\n    },\n    handleSelectionRangeChange\n  );\n\n  if (data && pendingSelection.current !== undefined && onSelectionChange) {\n    const keys = handleSelectionRange(pendingSelection.current.detail, data);\n    if (Array.isArray(keys)) {\n      onSelectionChange({ value: { all: false, keys: new Set(keys) }, target: null });\n    }\n    const range = pendingSelection.current\n      ? pendingSelection.current.range\n      : { offset: data.offset, count: data.data.length };\n    data = adjustDataState(data, range);\n    pendingSelection.current = undefined;\n    onLoadRange(range);\n  }\n\n  const suggestions = useMemo(\n    () => data && promotedSection && findSuggestions(data.data, promotedSection.count),\n    [data, promotedSection]\n  );\n\n  // TODO: check suggestions before Sparkle would cause a scrolling issue\n  const sparkleIndicator = <Sparkle sparkleHeight={sparkleHeight}></Sparkle>;\n\n  const itemActionProps = useItemAction(\n    currentKey,\n    data,\n    onItemAction,\n    ITEM_SELECTOR,\n    value === 'embedded'\n  );\n\n  useEffect(() => {\n    // update sparkleHeight only when we have suggestions\n    // avoid unnecessary iterating through elements\n    if (suggestions) {\n      const placeholder = rootRef.current?.querySelector(\n        '.' + PLACEHOLDER_STYLE_CLASS\n      ) as HTMLElement;\n      let height = placeholder?.offsetHeight || 0;\n      const suggestionItems = rootRef.current?.querySelectorAll('[data-oj-suggestion]');\n      suggestionItems?.forEach((item) => (height += (item as HTMLElement).offsetHeight));\n      setSparkleHeight(height);\n    }\n  }, [suggestions]);\n\n  // returns an ListItemContext based on ItemContext (added metadata and selector)\n  const getItemContext = useCallback(\n    (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n      const selectorRenderer =\n        selectionMode === 'multiple'\n          ? () => (\n              <Selector\n                onChange={handleSelectionChange}\n                rowKey={context.data.metadata.key}\n                selectedKeys={selectedKeys}></Selector>\n            )\n          : undefined;\n\n      return {\n        index: context.index,\n        data: context.data.data,\n        metadata: context.data.metadata,\n        selector: selectorRenderer\n      };\n    },\n    [selectionMode, selectedKeys, handleSelectionChange]\n  );\n\n  const ItemComponent = isVirtualized ? ListViewItem : MemoizeListViewItem;\n\n  const childrenComponent = (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n    const listItemContext = getItemContext(context);\n    const suggestion = suggestions?.get(listItemContext.metadata.key);\n    const isTabbable = allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key);\n    const isFocused = currentKey === listItemContext.metadata.key && !isTabbable;\n    const isActive = isFocused && active;\n    const isSelected = containsKey(selectedKeys, listItemContext.metadata.key);\n    const isFocusRingVisible = isFocused && showFocusRing && !pendingFocusRingChange;\n    const listItemFunc = (context: ListItemContext<K, D>, otherProps?: any) => (\n      <ItemComponent\n        key={listItemContext.metadata.key}\n        isFocused={isFocused}\n        isFocusRingVisible={isFocusRingVisible}\n        isActive={isActive}\n        isGridlineVisible={showGridline(listItemContext.index)}\n        isSelected={isSelected}\n        isTabbable={allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key)}\n        itemIndex={listItemContext.index}\n        itemKey={listItemContext.metadata.key}\n        itemData={listItemContext.data}\n        role={role}\n        selectionMode={selectionMode}\n        currentItemVariant={currentItemVariant}\n        {...(suggestion && { suggestion })}\n        {...(listItemContext.index === 0 && { isTopGridlineVisible: showGridlineTop() })}\n        {...otherProps}>\n        {children(context)}\n      </ItemComponent>\n    );\n\n    // if customItemRenderer is specified (ExpandableList and GroupedList)\n    // create a custom context with additional info including a function\n    // that helps create the default item component\n    if (customItemRenderer) {\n      const customRendererContext = {\n        listItemContext,\n        isFocused,\n        isFocusRingVisible,\n        isSelected,\n        isTabbable,\n        isActive,\n        defaultListItem: listItemFunc\n      };\n      return customItemRenderer(customRendererContext);\n    }\n    return listItemFunc(listItemContext);\n  };\n\n  viewportConfig = getViewportConfig(rootRef, viewportConfig);\n\n  /**\n   * Need to track pointer down element to set currentItem when initial focus happens\n   */\n  const handlePointerDown = useCallback((event: PointerEvent) => {\n    const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n    if (isKeyDefined(key)) pendingCurrentKey.current = key as K;\n  }, []);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === ' ' && currentKey && selectionMode !== 'none') {\n        setActive(true);\n      }\n    },\n    [currentKey, selectionMode, setActive]\n  );\n\n  const handleKeyUp = useCallback(() => {\n    setActive(false);\n  }, [setActive]);\n\n  // if data is not specified, listview should show loading indicator\n  // todo: replace placeholder with actual SkeletonContainer component (Ash is working on)\n  return (\n    <div\n      {...mergeProps(\n        allowTabbableMode ? tabbableModeProps : {},\n        currentKeyProps,\n        focusRingProps,\n        selectionProps,\n        itemActionProps,\n        {\n          onFocus: handleFocus,\n          onPointerDown: handlePointerDown,\n          onKeyDown: handleKeyDown,\n          onKeyUp: handleKeyUp\n        },\n        eventHandlers !== undefined ? eventHandlers : {}\n      )}\n      role={role}\n      aria-rowcount={ariaRowCount}\n      aria-colcount={1}\n      ref={rootRef}\n      class={classes}\n      tabIndex={0}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-multiselectable={ariaMultiSelectable}>\n      {data == null ? (\n        loadingIndicator\n      ) : isVirtualized ? (\n        <VirtualizedCollection\n          data={data}\n          itemSelector={ITEM_SELECTOR}\n          loadMoreIndicator={defaultLoadMoreIndicator}\n          onLoadRange={onLoadRange}\n          rangeExtractor={rangeExtractor}\n          suggestions={sparkleIndicator}\n          viewportConfig={viewportConfig}>\n          {childrenComponent}\n        </VirtualizedCollection>\n      ) : (\n        <LoadMoreCollection\n          data={data.data}\n          loadMoreIndicator={defaultLoadMoreIndicator}\n          hasMore={data.sizePrecision === 'atLeast' && data.data.length <= data.totalSize}\n          onLoadMore={() => {\n            data && onLoadRange({ offset: 0, count: data.data.length + 25 });\n          }}\n          suggestions={sparkleIndicator}\n          viewportConfig={viewportConfig}>\n          {childrenComponent}\n        </LoadMoreCollection>\n      )}\n    </div>\n  );\n}\n\nconst isExpander = (elem: HTMLElement) => {\n  if (elem.parentElement && elem.parentElement.classList.contains('oj-listview-expander')) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * A helper function to make sure specified elem is visible in the specified container\n */\nconst scrollToVisible = (elem: Element, scroller: Element, offset: number) => {\n  if (elem && scroller) {\n    if ((elem as any).scrollIntoViewIfNeeded) {\n      // for Safari, we'll need the non-standard scrollIntoViewIfNeeded\n      (elem as any).scrollIntoViewIfNeeded();\n    } else {\n      elem.scrollIntoView({ block: 'nearest' });\n    }\n    if (offset > 0) {\n      const scrollerBounds = scroller.getBoundingClientRect();\n      const elemBounds = elem.getBoundingClientRect();\n      const diff = scrollerBounds.top + offset - elemBounds.top;\n      if (diff > 0) {\n        scroller.scrollTop = scroller.scrollTop - diff;\n      }\n    }\n  }\n};\n\nconst getViewportConfig = (rootRef: RefObject<HTMLElement>, config?: ViewportConfig) => {\n  return (\n    config ?? {\n      scroller: () => {\n        return rootRef.current;\n      }\n    }\n  );\n};\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst handleSelectionRange = <K, D>(\n  detail: SelectionRangeDetail<K>,\n  dataState: DataState<K, D>\n) => {\n  const keys = dataState.data.map((value: { data: D; metadata: Metadata<K> }) => {\n    return value.metadata.key;\n  });\n  const startIndex = keys.indexOf(detail.value.start);\n  const endIndex = keys.indexOf(detail.value.end);\n  const minIndex = Math.min(startIndex, endIndex);\n  const maxIndex = Math.max(startIndex, endIndex);\n  if (minIndex === -1) {\n    // return a range to fetch so we can find all the keys, maxIndex should not be -1\n    return { offset: 0, count: dataState.totalSize };\n  } else {\n    // range of keys are in the current viewport, return them\n    return keys.slice(minIndex, maxIndex + 1);\n  }\n};\n\nconst defaultLoadingIndicator = (\n  <SkeletonContainer minimumCount={25}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n\nconst defaultLoadMoreIndicator = (\n  <div class={LOADMORE_STYLE_CLASS}>\n    <SkeletonContainer minimumCount={3}>\n      {() => {\n        return (\n          <Flex height=\"12x\" align=\"center\">\n            <Skeleton height=\"4x\" />\n          </Flex>\n        );\n      }}\n    </SkeletonContainer>\n  </div>\n);\n\n/**\n * Adjust the DataState as needed if it contains more than needed for the specified range\n */\nconst adjustDataState = <K, D>(dataState: DataState<K, D>, range: Range | null) => {\n  if (range) {\n    // prevent range offset from being larger than the data state\n    const safeRangeOffset = Math.min(range.offset, dataState.offset + dataState.totalSize);\n    const diff = safeRangeOffset - dataState.offset;\n    if (diff > 0) {\n      dataState = {\n        offset: safeRangeOffset,\n        data: dataState.data.slice(diff, diff + range.count),\n        totalSize: dataState.totalSize,\n        sizePrecision: dataState.sizePrecision\n      };\n    }\n  }\n  return dataState;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useEffect, useRef } from 'preact/hooks';\nimport { DataState, CurrentKeyDetail } from 'src/UNSAFE_Collection';\n\n/**\n * Hook to detect and handle when the current key has been removed\n * and try to find the next available current key.\n * TODO: put in its own private module as we should be able to share\n * between other Collection components.\n * @param dataState\n * @param currentKey\n * @param onChange\n */\nexport function useHandleRemoveCurrentKey<K, D>(\n  dataState: DataState<K, D> | null,\n  currentKey?: K,\n  onChange?: (detail: CurrentKeyDetail<K>) => void\n) {\n  const prevDataState = useRef<DataState<K, D> | null>();\n\n  useEffect(() => {\n    const oldDataState = prevDataState.current;\n    if (\n      currentKey &&\n      onChange &&\n      oldDataState &&\n      dataState &&\n      oldDataState.offset === dataState.offset &&\n      oldDataState !== dataState\n    ) {\n      const newKeys = dataState.data.map((dataMetadata) => {\n        return dataMetadata.metadata.key;\n      });\n      // first check if currentKey exists in new data, if it is then we\n      // don't need to do anything\n      if (newKeys.indexOf(currentKey) === -1) {\n        const oldKeys = oldDataState?.data.map((dataMetadata) => {\n          return dataMetadata.metadata.key;\n        });\n        // figure out what the new currentKey should be\n        let index = oldKeys.indexOf(currentKey);\n        if (index > -1) {\n          const backward = index === oldKeys.length - 1;\n          while (index >= 0 && index < oldKeys.length) {\n            index = backward ? index - 1 : index + 1;\n            const newCurrentKey = oldKeys[index];\n            if (newKeys.indexOf(newCurrentKey) > -1) {\n              onChange({ value: newCurrentKey });\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // update previous DataState\n    prevDataState.current = dataState;\n  }, [dataState, currentKey, onChange]);\n}\n"],"names":["getListViewRoles","ariaRole","list","item","cell","ITEM_STYLE_CLASS","ITEM_SELECTOR","ListViewItem","children","itemKey","itemIndex","itemDepth","isFocused","isFocusRingVisible","isActive","isGridlineVisible","isSelected","isTopGridlineVisible","isTabbable","role","selectionMode","suggestion","currentItemVariant","rootRef","useRef","roles","useMemo","cellRoleAttributes","interactionProps","applyActiveStyle","applyHoverStyle","applyPseudoHoverStyle","useInteractionStyle","variantClasses","listItemMultiVariantStyles","selectable","isSelectable","selected","selectedSingle","needsEventsHover","pseudoHover","active","focusHighlight","focusRingVisible","gridlineTop","gridlineBottom","classes","classNames","styleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","cls","cellStyles","flex","alignSelf","cellClasses","listItemStyles","checkboxContainer","_jsx","ref","jsx","id","useId","style","onKeyDown","event","key","stopPropagation","undefined","TabbableModeContext","Provider","value","FocusTrap","isDisabled","restoreFocusRef","isItemSelected","MemoizeListViewItem","memo","prev","next","itemData","SPARKLE_STYLE_CLASS","Sparkle","sparkleHeight","height","sparkleClasses","sparkleStyles","base","containerClasses","container","findSuggestions","data","count","slice","reduce","suggestions","index","metadata","set","Map","isExpander","elem","parentElement","classList","contains","scrollToVisible","scroller","offset","scrollIntoViewIfNeeded","scrollIntoView","block","scrollerBounds","getBoundingClientRect","elemBounds","diff","top","scrollTop","getViewportConfig","config","current","emptyKeys","all","keys","Set","handleSelectionRange","detail","dataState","map","startIndex","indexOf","start","endIndex","end","minIndex","Math","min","maxIndex","max","totalSize","defaultLoadingIndicator","SkeletonContainer","minimumCount","Flex","align","Skeleton","defaultLoadMoreIndicator","LOADMORE_STYLE_CLASS","adjustDataState","range","safeRangeOffset","sizePrecision","ariaLabel","ariaLabelledBy","allowTabbableMode","currentKey","gridlines","loadingIndicator","onCurrentKeyChange","onLoadRange","onSelectionChange","onItemAction","rangeExtractor","selectedKeys","viewportConfig","promotedSection","isVirtualized","customItemRenderer","eventHandlers","scrollToVisibleOffset","listRoles","anchorKey","pendingSelection","pendingCurrentKey","setActive","useState","setSparkleHeight","ariaMultiSelectable","ariaRowCount","listStyles","onChange","prevDataState","useEffect","oldDataState","newKeys","dataMetadata","oldKeys","backward","length","newCurrentKey","useHandleRemoveCurrentKey","currentKeyProps","useCurrentKey","element","keyExtractor","getPrevNextKey","listViewContains","showFocusRing","focusRingProps","useCollectionFocusRing","pendingFocusRingChange","isCurrentTabbableKey","tabbableModeProps","useTabbableModeSet","target","isKeyboardEvent","setTimeout","focus","findElementByKey","activeDescendant","getAttribute","querySelector","setAttribute","handleSelectionChange","useCallback","size","Array","from","pop","handleSelectionRangeChange","isArray","handleInitialFocus","firstKey","getFirstVisibleKey","isKeyDefined","handleSelectorFocusCapture","relatedTarget","handleFocus","useCollectionGestureContext","selectionProps","useSelection","isPrev","sparkleIndicator","itemActionProps","useItemAction","placeholder","PLACEHOLDER_STYLE_CLASS","offsetHeight","suggestionItems","querySelectorAll","forEach","getItemContext","context","selectorRenderer","Selector","rowKey","selector","ItemComponent","childrenComponent","listItemContext","get","containsKey","listItemFunc","otherProps","bottom","defaultListItem","handlePointerDown","handleKeyDown","handleKeyUp","mergeProps","onFocus","onPointerDown","onKeyUp","tabIndex","VirtualizedCollection","itemSelector","loadMoreIndicator","LoadMoreCollection","hasMore","onLoadMore"],"mappings":"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"}