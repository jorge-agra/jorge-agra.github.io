{"version":3,"file":"SelectMultiple-840cf2ee.js","sources":["../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_RedwoodIcons/NavLeft/NavLeft.tsx","../../src/UNSAFE_RedwoodIcons/CancelS/CancelS.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileFieldInput.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgNavLeft = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path\n        d=\"m9.414 12 7.293-7.293-1.414-1.414L6.586 12l8.707 8.707 1.414-1.414L9.414 12z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgNavLeft as NavLeft };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgCancelS = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm3.498 5L12 10.498 8.502 7 7 8.502 10.498 12 7 15.498 8.502 17 12 13.502 15.498 17 17 15.498 13.502 12 17 8.502z\"\n      fill=\"currentcolor\"\n      fillRule=\"evenodd\"\n    />\n  </Icon>\n);\nexport { SvgCancelS as CancelS };\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = Pick<\n  TextFieldProps,\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseDown'\n  | 'statusVariant'\n  | 'styleVariant'\n>;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      variant=\"borderless\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  );\n\n  const clearButton = (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      variant=\"borderless\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  );\n  const dropdownArrow = (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      onClick={onDropdownArrowClick}\n    />\n  );\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","import { ComponentProps, Ref } from 'preact';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </>\n  );\n}\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '../utils/UNSAFE_attributeUtils';\nimport { TextProps, textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldInputVariantOptions } from '../UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { selectMultipleMobileFieldInputStyles } from './themes/SelectMultipleMobileFieldInputStyles.css';\nimport { isInputPlaceholderShown } from '../UNSAFE_TextField/TextFieldUtils';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Text } from '../UNSAFE_Text';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { TextFieldInputRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ntype EventProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onBlur' | 'onFocus'>;\n\ntype Props = AriaProps &\n  EventProps &\n  TextProps & {\n    displayValue?: string;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    isRequired?: boolean;\n    placeholder?: string;\n    variant?: 'default' | 'embedded';\n  };\n\nconst interpolations = [...Object.values(textInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * This component is used for rendering the main field in mobile phones. This is a bit different from the\n * normal main field (SelectMultipleFieldInput) that we use for desktop & tablet devices in the way that\n * a user will not be able to edit the value of this field. But, one can still have other functionalities\n * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.\n *\n * This also differs from ReadonlyTextFieldInput in the following ways:\n * 1. This will be rendered as div as well, but has a role of combobox set on it\n * 2. This will not be read as readonly input by the screen readers\n * 3. This has the stylings much similar to the TextFieldInput component\n * 4. This supports the use of placeholder and shows it when there is no value present\n * 5. This supports having the variant property and styles accordingly\n *\n * As such, this is very similar to the TextFieldInput except that this does not allow user input.\n * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the\n * behavior we need, it will make the field as readonly and screen readers read the same about this\n * field. This will be an incorrect representation contextually as one can still edit the value by opening\n * the dropdown and changing the selection.\n */\nexport const SelectMultipleMobileFieldInput = forwardRef(\n  (\n    {\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': ariaExpanded,\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      displayValue,\n      hasEmptyLabel,\n      hasInsideLabel = false,\n      isRequired,\n      onBlur,\n      onFocus,\n      placeholder,\n      textAlign,\n      variant = 'default'\n    }: Props,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    // consume required contexts\n    const { isDisabled, isFocused, hasValue = false } = useFormFieldContext();\n    const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n    // setup properties\n    const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n      ? placeholder\n      : undefined;\n\n    // Add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n    // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n    // kinds of labels, this helps to ensure we don't override a meaningful label.\n    const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n    const mergedAriaLabelledBy = hasEmptyLabel\n      ? merge([ariaLabelledBy, UNSAFE_ariaLabelledBy])\n      : ariaLabelledBy;\n\n    // setup style classes\n    const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n    const { classes: themeClasses } = useComponentTheme<TextFieldInputVariantOptions>(\n      TextFieldInputRedwoodTheme,\n      {\n        type: 'notPassword',\n        styleVariant: variant,\n        textarea: 'notTextArea',\n        input: 'isInput',\n        prefix: 'noPrefix',\n        suffix: 'noSuffix',\n        startContent: 'noStartContent',\n        endContent: 'hasEndContent',\n        insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n        value: hasValue ? 'hasValue' : 'noValue',\n        focused: isFocused ? 'isFocused' : 'notFocused',\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n      }\n    );\n    const rootDivStyleClasses = classNames([\n      selectMultipleMobileFieldInputStyles.base,\n      styleInterpolationClasses,\n      themeClasses\n    ]);\n\n    return (\n      <div\n        aria-autocomplete=\"list\"\n        aria-controls={ariaControls}\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-invalid={ariaInvalid}\n        aria-label={ariaLabel}\n        aria-labelledby={mergedAriaLabelledBy}\n        aria-required={isRequired ? 'true' : undefined}\n        class={rootDivStyleClasses}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={ref}\n        role=\"combobox\"\n        {...(isTabbable && tabbableModeProps)}>\n        <div class={selectMultipleMobileFieldInputStyles.content}>\n          <Text variant={displayValue ? 'inherit' : 'secondary'}>\n            {displayValue || myPlaceholder}\n          </Text>\n        </div>\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo, useRef } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n  // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n\n  // ref for the static set of value items we want to show in the selected only view\n  const selectedOnlyValueItemsRef = useRef(valueItems);\n  // ref for the previous value of isDropdownSelectedOnlyView\n  const prevIsDropdownSelectedOnlyViewRef = useRef(isDropdownSelectedOnlyView);\n  // if the value of isDropdownSelectedOnlyView has changed, store the new static set of\n  // value items to show in selected only view, otherwise leave it the same\n  selectedOnlyValueItemsRef.current =\n    prevIsDropdownSelectedOnlyViewRef.current !== isDropdownSelectedOnlyView\n      ? valueItems\n      : selectedOnlyValueItemsRef.current;\n  // update the ref for the previous value of isDropdownSelectedOnlyView AFTER using it to\n  // update the ref for the static set of value items\n  prevIsDropdownSelectedOnlyViewRef.current = isDropdownSelectedOnlyView;\n\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView ||\n      !selectedOnlyValueItemsRef.current ||\n      selectedOnlyValueItemsRef.current.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: selectedOnlyValueItemsRef.current.length ?? 0,\n          sizePrecision: 'exact',\n          data: selectedOnlyValueItemsRef.current.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","import { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { equals } from 'ramda';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: Ref<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n  onLoadRange: UseSelectMultipleProps<K, D>['onLoadRange'];\n};\n\nexport function useMobileDropdown<K extends string | number, D>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems = [],\n  onCommit,\n  onLoadRange,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(keysFromValueItems(valueItems));\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData, onLoadRange: selectedOnlyOnLoadRange } = useSelectedOnlyData<\n    K,\n    D\n  >({\n    isDropdownSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, newKeys);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(new Set(valueItems.map((v) => v.key)));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: keysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // if it was open before, then this is a valueItems change, so no action\n      if (wasDropdownOpen.current) return;\n\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n      wasDropdownOpen.current = true;\n      return;\n    }\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n      const nextDropdownSelectedKeys = keysFromValueItems(valueItems);\n      // since valueItems can be a different array with the same values and keysFromValueItems\n      // will create a new set every time, compare the value and update the set only if the\n      // values have changed\n      return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n        ? prevDropdownSelectedKeys\n        : nextDropdownSelectedKeys;\n    });\n    wasDropdownOpen.current = false;\n  }, [isDropdownOpen, valueItems]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data: isDropdownSelectedOnlyView ? selectedOnlyData : data,\n      selectedKeys: dropdownSelectedKeys,\n      onCurrentKeyChange,\n      onLoadRange: isDropdownSelectedOnlyView ? selectedOnlyOnLoadRange : onLoadRange,\n      onSelectionChange\n    },\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView,\n      isSelectedValuesCountShown: dropdownSelectedKeys.size > 0 || isDropdownSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys.size,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nconst keysFromValueItems = <K, D>(valueItems: Item<K, D>[]) =>\n  new Set(valueItems.map((i) => i.key));\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  SelectMobileDropdown,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '../PRIVATE_SelectCommon';\nimport { DataState, ListItemContext, Metadata } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { View } from '../UNSAFE_View';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileFieldInput } from './SelectMultipleMobileFieldInput';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useMobileDropdown } from './useMobileDropdown';\nimport { useSelectMultiple } from './useSelectMultiple';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype SelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  /**\n   * Metadata for the item.\n   */\n  metadata: ItemRendererMetadata<K>;\n  /**\n   * User-entered search text.\n   */\n  searchText?: string;\n  /**\n   * The selected keys in the dropdown\n   */\n  selectedKeys?: Set<K>;\n  /**\n   * Callback function to trigger when the selection changes\n   *\n   * @param detail The selection change details\n   */\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      ariaProps,\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    const {\n      collectionProps: mobileDropdownCollectionProps,\n      footerProps: mobileDropdownFooterProps,\n      selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n      selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps\n    } = useMobileDropdown<K, D>({\n      data,\n      inputRef: enabledElementRef,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      itemText,\n      textTagListRef: textTagListProps.textTagListRef,\n      userInput,\n      valueItems,\n      onCommit,\n      onLoadRange: propOnLoadRange,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n    // for dropdown field\n    const {\n      formFieldContext: mobileDropdownFormFieldContext,\n      inputProps: mobileDropdownInputProps,\n      labelProps: mobileDropdownLabelProps,\n      textFieldProps: mobileDropdownTextFieldProps,\n      userAssistanceProps: mobileDropdownUserAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n    mobileDropdownFormFieldContext.hasValue =\n      propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp = (\n      <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n        {label}\n      </Label>\n    );\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const mobileDropdownFieldLabelProps = {\n      label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n      labelEdge: 'inside' as const\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={mainFieldRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDropdownAbove &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n          {...(isPhone() ? mobileDropdownUserAssistanceProps : {})}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...(isPhone() ? mobileDropdownCollectionProps : collectionProps)}\n        aria-label={label ?? ''}\n        currentItemVariant=\"highlight\"\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        searchText={\n          isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n        }\n        selectionMode=\"multiple\"\n      />\n    );\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    const defaultMainFieldInput = (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    );\n    const phoneMainFieldInput = (\n      <SelectMultipleMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            selectedValuesCount={valueItems?.length}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {\n              // Use the mobile field if the component is being rendered in a phone\n              // and it is not disabled.\n              isPhone() && !isDisabled ? phoneMainFieldInput : defaultMainFieldInput\n            }\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {isPhone() ? (\n          <SelectMobileDropdown\n            header={\n              <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n                <View>\n                  <SelectMultipleField\n                    fieldLabel={label}\n                    onBlur={focusProps.onfocusout}\n                    onFocus={focusProps.onfocusin}\n                    onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n                    onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n                    onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n                    onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n                    onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n                    {...mobileDropdownFieldLabelProps}\n                    {...mobileDropdownTextFieldProps}\n                    {...mobileDropdownSelectMultipleFieldProps}>\n                    <SelectMultipleFieldInput\n                      aria-controls={dropdownId}\n                      aria-expanded={isDropdownOpen}\n                      aria-label={ariaLabel}\n                      isRequired={isRequired}\n                      liveRegionText={liveRegionText}\n                      placeholder={placeholder}\n                      selectedValuesDescriptionId={selectedValuesDescriptionId}\n                      textAlign={textAlign}\n                      virtualKeyboard={virtualKeyboard}\n                      {...inputEventHandlers}\n                      {...mobileDropdownInputProps}\n                      {...mobileDropdownSelectMultipleFieldInputProps}\n                    />\n                  </SelectMultipleField>\n                </View>\n                {dropdownInlineUserAssistance}\n              </FormFieldContext.Provider>\n            }\n            footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}>\n            <DropdownList hasBottomGap={true} isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n          </SelectMobileDropdown>\n        ) : (\n          <Dropdown\n            dropdownRef={dropdownRef}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}\n            anchorRef={mainFieldRef}\n            {...dropdownEventHandlers}>\n            <DropdownList\n              hasBottomGap={dropdownInlineUserAssistance === undefined}\n              isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n            {dropdownInlineUserAssistance}\n          </Dropdown>\n        )}\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useId, useMemo, useRef, useState } from 'preact/hooks';\nimport { KEYS, isControlOrFunctionKey, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useEffectEvent } from '../hooks/PRIVATE_useEffectEvent';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'aria-describedby' | 'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowArg: typeof currentRow): currentRowArg is Required<typeof currentRow> => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowArg.rowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, inputRef, isDropdownOpen, removeDropdown]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRow)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRow.rowKey);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRow,\n      direction,\n      hasSelectedValuesCount,\n      inputRef,\n      isDropdownOpen,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [setSelectedKeys, valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen, setCurrentRow]);\n\n  // We need to highlight the first result whenever the data changes\n  const STABLE_onDataChange = useEffectEvent((newData: typeof data) => {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = newData?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: isEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n  });\n  useEffect(() => {\n    STABLE_onDataChange(data);\n  }, [STABLE_onDataChange, data]);\n\n  return {\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data,\n      onCurrentKeyChange,\n      onSelectionChange,\n      onLoadRange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textTagListProps,\n    userInput\n  };\n}\n"],"names":["MobileDropdownFooter","onApply","translations","useTranslationBundle","_jsx","class","mobileDropdownFooterStyles","base","children","Button","display","edge","label","selectMultiple_apply","size","variant","onAction","rootStyles","SelectedValuesCount","ariaLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","jsx","Chip","SvgNavLeft","props","Icon","viewBox","fill","d","SvgCancelS","fillRule","SelectMultipleField","fieldLabel","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","isDropdownSelectedOnlyView","isSelectedValuesCountShown","selectedValuesCount","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","onSelectedValuesCountKeyDown","onSelectedValuesCountKeyUp","onSelectedValuesCountMouseDown","onSelectedValuesCountToggle","passThroughTextFieldProps","isDisabled","isLoading","useFormFieldContext","backButton","IconButton","selectMultiple_back","NavLeft","clearButton","formControl_clear","CancelS","dropdownArrow","DropdownArrow","onClick","endContent","undefined","_jsxs","Flex","align","justify","gap","isSelected","onToggle","TextField","startContent","mainContent","SelectMultipleFieldInput","displayValue","isTextTagListShown","isUserFiltering","liveRegionText","onExitNavigation","onRemove","removeIcon","selectedValuesDescriptionId","textTagListData","textTagListRef","userInput","virtualKeyboard","passThroughTextFieldInputProps","jsxs","_Fragment","Fragment","TextTagList","selectMultiple_selectedValues","data","maxWidth","ref","flex","TextFieldInput","autoComplete","hasPrefix","role","spellcheck","type","value","HiddenAccessible","id","isHidden","LiveRegion","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","SelectMultipleMobileFieldInput","forwardRef","ariaControls","ariaDescribedBy","ariaExpanded","ariaInvalid","ariaLabelledBy","hasEmptyLabel","isRequired","onBlur","onFocus","placeholder","textAlign","isFocused","hasValue","isTabbable","tabbableModeProps","useTabbableMode","myPlaceholder","isInputPlaceholderShown","UNSAFE_ariaLabelledBy","useAccessibleContext","mergedAriaLabelledBy","merge","styleInterpolationClasses","classes","themeClasses","useComponentTheme","TextFieldInputRedwoodTheme","styleVariant","textarea","input","prefix","suffix","insideLabel","focused","disabled","rootDivStyleClasses","classNames","selectMultipleMobileFieldInputStyles","content","Text","useDisplayValues","itemText","valueItems","separator","plural_separator","useMemo","displayValues","selectedItems","arValues","mapFunc","itemContext","renderItemText","mappedArray","map","Set","createDisplayValues","concatenatedDisplayValues","Array","from","join","concatDisplayValues","textTags","item","key","createTextTags","useSelectedOnlyData","selectedOnlyValueItemsRef","useRef","prevIsDropdownSelectedOnlyViewRef","current","length","offset","totalSize","sizePrecision","valueItem","metadata","onLoadRange","updateCache","cache","keys","forEach","has","set","keysFromValueItems","i","SelectMultiple","propAriaDescribedBy","assistiveText","propData","helpSourceLink","helpSourceText","propIsDisabled","propIsLoading","isReadonly","propIsReadonly","isRequiredShown","itemRenderer","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","propOnLoadRange","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","origIsFocused","readonlyElementRef","useFocusableTextField","ariaProps","collectionProps","dropdownArrowEventHandlers","dropdownEventHandlers","dropdownRef","hasSelectedValuesCount","inputEventHandlers","isDropdownAbove","isDropdownOpen","mainFieldRef","mouseProps","searchText","selectedValuesCountProps","setDropdownOpen","setUserInput","stopFiltering","textTagListProps","inputRef","propIsFocused","setDropdownSelectedOnlyView","useState","selectedOnlyDataProps","handleOnFilter","useCallback","args","isEmptyOrUndefined","currentRow","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","handleUpDownArrowKeys","onCurrentKeyChange","selectedKeys","setCurrentRow","setSelectedKeys","useSelectCommon","direction","useUser","useId","combinedAriaDescribedBy","removeDropdown","parentElement","removeChild","shouldSelectCurrentRow","currentRowArg","rowKey","selectRow","newValue","previousValue","myHandleDropdownAutoDismiss","event","keyboardEvent","code","KEYS","TAB","shiftKey","focus","chipRef","myHandleMainFieldKeyDown","isControlOrFunctionKey","stopPropagation","LEFT","HTMLInputElement","selectionStart","selectionEnd","RIGHT","ENTER","NUMPAD_ENTER","useEffect","reduce","accumKeys","currentItem","add","querySelector","handleSelectedValuesCountKeyDown","UP","DOWN","preventDefault","ESC","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","detail","onSelectionChange","newKeys","onTextTagListExitNavigation","setTimeout","onTextTagListRemove","delete","mergeProps","onAutoDismiss","onPosition","onInput","STABLE_onDataChange","useEffectEvent","newData","firstResultKey","currentKey","useSelectMultiple","mobileDropdownCollectionProps","footerProps","mobileDropdownFooterProps","selectMultipleFieldInputProps","mobileDropdownSelectMultipleFieldInputProps","selectMultipleFieldProps","mobileDropdownSelectMultipleFieldProps","dropdownSelectedKeys","setDropdownSelectedKeys","dataCache","Map","currentValueItems","items","find","push","get","dropdownInputRef","selectedOnlyData","selectedOnlyOnLoadRange","closeDropdown","v","clear","onTextTagRemove","newSelectedKeys","onTextTagExitNavigation","wasDropdownOpen","prevDropdownSelectedKeys","nextDropdownSelectedKeys","equals","useMobileDropdown","useLoadingIndicatorTimer","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","mobileDropdownFormFieldContext","mobileDropdownInputProps","mobileDropdownLabelProps","mobileDropdownTextFieldProps","mobileDropdownUserAssistanceProps","dropdownId","labelComp","Label","isPhone","forId","fieldLabelProps","mobileDropdownFieldLabelProps","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","anchorRef","FormFieldContext","Provider","ReadonlyTextField","onfocusout","onfocusin","ReadonlyTextFieldInput","as","elementRef","isDataFetched","isBeforeDataFetch","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","dropdownInlineUserAssistance","DropdownUserAssistance","isEmptyResults","dropdownListContent","EmptyResults","DefaultList","currentItemVariant","selectionMode","shouldShowDropdown","defaultMainFieldInput","isTablet","phoneMainFieldInput","SelectMobileDropdown","header","View","footer","isOpen","DropdownList","hasBottomGap","Dropdown"],"mappings":"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"}